name: Test & Publish to GHCR

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "release" ]
  pull_request:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # <account>/<repo>
  IMAGE_NAME: jonathanbout/portfolio-backend
  IS_PRODUCTION_BUILD: ${{ github.event_name != 'pull_request' }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

jobs:
  test:
    runs-on: ubuntu-latest
    # run dotnet test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Install dependencies
        run: dotnet restore Portfolio.Backend.sln
      - name: Build
        run: dotnet build Portfolio.Backend.sln  --no-restore
      - name: Test
        run: dotnet test Portfolio.Backend.Tests/Portfolio.Backend.Tests.csproj --no-restore

  build:
  # only run when building for production
    if: github.event_name != 'pull_request' # can't use env here for some reason
    needs: 
        - test
    # runs-on: ${{ env.IS_PRODUCTION_BUILD && 'buildjet-2vcpu-ubuntu-2204-arm' || 'ubuntu-latest' }}
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0 #v3.5.0
        if: env.IS_PRODUCTION_BUILD == 'true'
        with:
          cosign-release: 'v2.2.4'

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.IS_PRODUCTION_BUILD == 'true' # only run when pushing image
        uses: docker/login-action@v3.0.0 # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ github.sha }}
            ${{ env.BRANCH_NAME }}
      - name: Output tags
        run: echo "${{ steps.meta.outputs.tags }}"
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0 # v5.0.0
        with:
          context: .
          file: ./Portfolio.Backend/Dockerfile
          push: ${{ env.IS_PRODUCTION_BUILD == 'true' }} # only push when pushing image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: 'linux/arm64' # only build for arm64 when pushing image, otherwise amd64

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: env.IS_PRODUCTION_BUILD == 'true'
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
