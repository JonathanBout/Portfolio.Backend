// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portfolio.Backend.Services.Implementation;

#nullable disable

namespace Portfolio.Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250304090038_RefineRefreshTokens")]
    partial class RefineRefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("Portfolio.Backend.Data.Users.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_refresh_token_owner_id");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.RefreshTokenValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<long>("ReferringTokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("referring_token_id");

                    b.Property<byte[]>("TokenHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("token_hash");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token_value");

                    b.HasIndex("ReferringTokenId")
                        .HasDatabaseName("ix_refresh_token_value_referring_token_id");

                    b.ToTable("refresh_token_value", (string)null);
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<DateTimeOffset>("LastPasswordResetRequest")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_password_reset_request");

                    b.Property<string>("NameSlug")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("name_slug")
                        .HasComputedColumnSql("lower(regexp_replace(full_name, E'[^a-zA-Z0-9_]+', '-', 'gi'))", true);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<DateTimeOffset>("PasswordResetExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_expiration");

                    b.Property<byte[]>("PasswordResetTokenHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_reset_token_hash");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("bytea")
                        .HasColumnName("profile_image");

                    b.Property<string>("ProfileImageFormat")
                        .HasColumnType("text")
                        .HasColumnName("profile_image_format");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Yes. It's me.",
                            Email = "me@jonathanbout.com",
                            FullName = "Jonathan Bout",
                            LastPasswordResetRequest = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameSlug = "",
                            PasswordHash = new byte[0],
                            PasswordResetExpiration = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordResetTokenHash = new byte[0]
                        });
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.RefreshToken", b =>
                {
                    b.HasOne("Portfolio.Backend.Data.Users.User", "Owner")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_token_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.RefreshTokenValue", b =>
                {
                    b.HasOne("Portfolio.Backend.Data.Users.RefreshToken", "ReferringToken")
                        .WithMany("Values")
                        .HasForeignKey("ReferringTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_token_value_refresh_token_referring_token_id");

                    b.Navigation("ReferringToken");
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.RefreshToken", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Portfolio.Backend.Data.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
